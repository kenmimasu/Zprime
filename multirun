#!/usr/bin/env python

import os,StringIO,re,optparse,subprocess,time,sys,random

parser = optparse.OptionParser("usage: %prog [options] executable ncall ecm icoll mdl")
parser.add_option("-c", "--cosx", action="store_const", const=1,default=0, help="symmetric cos theta and x sums")
parser.add_option("-d", "--dists", action="store_const", const=1, default=0, help="write out distributions to log file")
parser.add_option("-s", "--spit", action="store_true", default=False, help="output to stdout")
parser.add_option("-i", "--iseed", action="store_true", default=False, help="used fixed seed")
parser.add_option("-r", "--range", default=None, help="specify tuple of min and max energy range as 'min:max'")
parser.add_option("-t", "--tag", default="",type="string",help="add specific tag to logfile name")
parser.add_option("-p", "--path", default="",type="string",help="specify where to save log files")
parser.add_option("-y", "--ycut", default=100,type="float", help="rapidity cut")
parser.add_option("-x", "--ptcut", default=0,type="float", help="pT cut")
parser.add_option("-m", "--cont", default=0,type="int", help="Specify BSM contribution: 0=ALL; 1=INTERFERENCE ONLY; 2=SQUARES ONLY; 3=NONE")
parser.add_option("-P", "--pdf", default=4,type="int", help="PDF set: 1=CTEQ6M; 2=CTEQ6D; 3=CTEQ6L; 4=CTEQ6L1")
parser.add_option("-q", "--qcd", default=0,action="store_const",const=1, help="Include QCD")
parser.add_option("-Q", "--qfact", default=0,type="float", help="factorisation scale")
parser.add_option("-b", "--bsm", default=1,action="store_const",const=0, help="remove Z's")
parser.add_option("-e", "--ew", default=0,action="store_const",const=1, help="Include EW")
parser.add_option("-f", "--final",  default=0,type="int", help="Set final state: 0=ttbar 1=bbbar 2=epem 3=jj")

(options, args) = parser.parse_args()
ff=['tt','bb','ee','jj']
ncall=int(args[1])/400 if options.cosx else args[1]
invmass=(0,args[2]) if options.range==None else re.findall(r"\d+",options.range)
name = "LHC" if (args[3]=="0") else "TEV"
path = "" if (options.path=="") else "{0}/".format(options.path)
config1=StringIO.StringIO()
seed = 12347 if options.iseed else random.randint(0,100000)
print >> config1, '%s, %s' % (args[2],args[3])
#print >> config1, '3 ! ISTRUCTURE'
print >> config1, '%s ! ISTRUCTURE' % options.pdf
print >> config1, '%sd0 ! ycut' % options.ycut
print >> config1, '%sd0 ! pTcut' % options.ptcut
print >> config1, '%s,111,333 ! iseed,jdummy,kdummy' % seed
print >> config1, '%s ! ncall' % ncall
print >> config1, '5 ! itmx'
print >> config1, '-1.d0 ! acc'
print >> config1, '123 ! idummy'
print >> config1, '100000.d0 ! alumpb'
print >> config1, '%sd0 ! min invariant mass' % invmass[0]
print >> config1, '%sd0 ! max invariant mass' % invmass[1]
print >> config1, '%s ! dist switch' % options.dists
print >> config1, '%s ! cosx switch' % options.cosx
print >> config1, '%s ! select CONT' % options.cont
print >> config1, '%s ! QCD switch' % options.qcd
print >> config1, '%s ! EW switch' % options.ew
print >> config1, '%s ! BSM switch' % options.bsm
print >> config1, '%s ! final state switch' % options.final
print >> config1, '%s ! name' % name
print >> config1, '%s ! model' % args[4]
print >> config1, '%sd0 ! factorisation scale' % options.qfact


cosstr=""
if options.cosx==1:cosstr="_cos_x"
iecm=int(float(args[2])/1000)
filename = '%s%s_%s_%s_%s_%s%s%s' % (name,iecm,ff[options.final],args[4],invmass[0],invmass[1],options.tag,cosstr)
try:
      with open('Config/%s.com' % filename,'w') as cfile1:
            cfile1.write(config1.getvalue())
except IOError:
      print "Not in right directory?"
      sys.exit()
write = '' if options.spit else '> %s%s.log' % (path,filename)
command1 = './%s < Config/%s.com %s' % (args[0],filename,write)
print 'executing: ',command1
subprocess.call(command1, shell=True)
#os.system('rm %s.com' % filename)    
#os.system('pico %s.com' % filename)    

